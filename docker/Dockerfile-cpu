ARG UBUNTU_VER=24.04
FROM ubuntu:${UBUNTU_VER}

ARG PYTHON_VER=3.12.7
ARG GST_VER="main"

LABEL description="A dockerfile for playing with GStreamer with all video codecs supporting DRL AI stack using CPU-only"
LABEL maintainer="Nikita Smirnov <nikita.smirnov@cs.uni-kiel.de>"
LABEL version="2.0.0"

ENV LANGUAGE="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    LANG="en_US.UTF-8" \
    LC_CTYPE="en_US.UTF-8" \
    DEBIAN_FRONTEND="noninteractive"

WORKDIR /tmp

RUN apt-get update -y && apt-get upgrade -y && apt-get install -y --no-install-recommends --fix-missing \
    autoconf autotools-dev automake bison build-essential ca-certificates cmake curl bzip2 libexpat1-dev libgomp1 git g++ gcc gperf flex language-pack-en-base \
    libtool libboost-dev lsb-release libnss3 libssl-dev  \
    make nasm perl pkg-config python3-dev python3-pip strace tar tzdata v4l-utils yasm wget x11-xserver-utils zlib1g-dev \
    libva-dev libdrm-dev libudev-dev libnice-dev libnuma-dev librtmp-dev libsrt-openssl-dev libx264-dev libx265-dev libvpx-dev libpango1.0-dev libcairo2-dev \
    software-properties-common ubuntu-restricted-extras

# install gcc13
RUN apt-get install -y  && add-apt-repository ppa:ubuntu-toolchain-r/test -y && apt-get update -y && apt-get install gcc-13 g++-13 -y
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

# install pyenv
WORKDIR /root/
RUN git clone --depth=1 https://github.com/pyenv/pyenv.git .pyenv
ENV PYENV_ROOT="/root/.pyenv"
ENV PATH="${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}"
WORKDIR /tmp

# install python
RUN if [ "$(lsb_release -sr | cut -d. -f1)" = "24" ]; \
    then \
    apt-get install -y libncurses6; \
    else \
    apt-get install -y libncurses5 libncurses5-dev libncursesw5; \
    fi
RUN apt-get clean && apt-get update && apt-get install -y libbz2-dev tk-dev libreadline-dev libsqlite3-dev liblzma-dev python3-testresources swig
RUN pyenv install ${PYTHON_VER} && pyenv global ${PYTHON_VER}
RUN ln -sf $(pyenv which python) /usr/bin/python3 && ln -sf $(pyenv which python) /usr/bin/python

# set pip globally
RUN mkdir -p ~/.config/pip && echo "[global]\nbreak-system-packages=true" > ~/.config/pip/pip.conf

# for building
RUN ldconfig && pip install meson ninja

# install poetry from source
RUN mkdir -p /root/poetry && \
    curl -sSL https://install.python-poetry.org | POETRY_HOME=/root/.poetry python -
ENV PATH="/root/.poetry/bin:${PATH}"

# additional av1 encoders/decoders
# aom encoder
RUN git -C aom pull 2> /dev/null || git clone --depth 1 https://aomedia.googlesource.com/aom && \
    mkdir -p aom_build && \
    cd aom_build && \
    cmake -G "Unix Makefiles" -DENABLE_TESTS=OFF -DENABLE_NASM=on ../aom && \
    make -j${nproc} && make install

# dav1d decoder
RUN git -C dav1d pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/dav1d.git && \
    mkdir -p dav1d/build && \
    cd dav1d/build && \
    meson setup -Denable_tools=false -Denable_tests=false .. && \
    ninja && ninja install

# svt encoder
RUN git -C SVT-AV1 pull 2> /dev/null || git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git && \
    mkdir -p SVT-AV1/build && cd SVT-AV1/build && \
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF -DBUILD_SHARED_LIBS=OFF .. && \
    make -j${nproc} && make install

# install node
RUN curl -sL https://deb.nodesource.com/setup_20.x | bash -s -- -y && apt-get install -y nodejs

# install rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
RUN cargo install cargo-c

# install gstreamer dependencies
RUN apt-get update && apt-get install -y libgl1-mesa-dev libglu1-mesa-dev mesa-utils libx11-dev libxext-dev libxrender-dev libgirepository1.0-dev gobject-introspection
RUN if [ "$(lsb_release -sr | cut -d. -f1)" = "24" ]; \
    then \
    ln /usr/lib/x86_64-linux-gnu/gobject-introspection/giscanner/_giscanner.cpython-312-x86_64-linux-gnu.so /usr/lib/x86_64-linux-gnu/gobject-introspection/giscanner/_giscanner.so; \
    else \
    ln /usr/lib/x86_64-linux-gnu/gobject-introspection/giscanner/_giscanner.cpython-310-x86_64-linux-gnu.so /usr/lib/x86_64-linux-gnu/gobject-introspection/giscanner/_giscanner.so; \
    fi

# HACK: temporary fix for missing distutils in python 3.12
RUN if [ "$(echo $PYTHON_VER | cut -d. -f1,2)" = "3.12" ]; then pip install setuptools==72.2.0; fi

# install gstreamer
RUN apt-get --purge remove -y *gstreamer*
RUN git clone https://gitlab.freedesktop.org/gstreamer/gstreamer.git
RUN cd gstreamer && git fetch --tags && git checkout ${GST_VER} && \
    meson build \
    -Dgpl=enabled -Drs=enabled -Dlibav=enabled -Dpython=enabled -Dintrospection=enabled -Drtsp_server=enabled -Dwebrtc=enabled \
    -Ddevtools=enabled -Dtests=disabled -Dexamples=disabled -Ddoc=disabled -Dorc=disabled \
    -Dlibsoup:sysprof=disabled \
    -Dgst-plugins-base:gl=enabled -Dgst-plugins-base:pango=enabled -Dgst-plugins-base:introspection=enabled \
    -Dcustom_subprojects=pygobject \
    -Dgst-plugins-bad:gl=enabled -Dgst-plugins-bad:introspection=enabled -Dgst-plugins-bad:nvcodec=enabled -Dgst-plugins-bad:rtp=enabled -Dgst-plugins-bad:webrtc=enabled \
    -Dbuildtype=release \
    && ninja -C build \
    && meson install -C build
RUN cp -r /tmp/gstreamer/subprojects/gst-plugins-rs/net/webrtc/gstwebrtc-api/ /home/

ENV LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
ENV PATH="/usr/local/lib/x86_64-linux-gnu/gstreamer-1.0:${PATH}"
ENV GST_PLUGIN_PATH=/usr/local/lib/x86_64-linux-gnu/gstreamer-1.0
ENV GST_PLUGIN_SCANNER=/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner
ENV GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0/

# set glib introspection bindings
RUN export PYTHON_SITE_PACKAGES="/root/.pyenv/versions/${PYTHON_VER}/lib/python$(echo $PYTHON_VER | cut -d. -f1,2)/site-packages" && \
    cp -r /usr/lib/python3/dist-packages/gi/ ${PYTHON_SITE_PACKAGES}/ && \
    TARGET_FILE=$(find ${PYTHON_SITE_PACKAGES}/gi/ -name '_gi.cpython*.so' -type f | head -n 1) && \
    ln -s $TARGET_FILE ${PYTHON_SITE_PACKAGES}/gi/_gi.so

# install gst-shark tracers
RUN apt-get install -y graphviz libgraphviz-dev gtk-doc-tools
RUN git clone --depth=1 https://github.com/RidgeRun/gst-shark/ && \
    cd gst-shark && \
    ./autogen.sh --prefix /usr/ --libdir /usr/local/lib/x86_64-linux-gnu/ && \
    make install
RUN unset GST_SHARK_LOCATION && unset GST_SHARK_CTF_DISABLE

# add x11 support
RUN apt-get update -y \
    && apt-get install -y openssh-server dbus-x11 xauth xorg xpra apt-transport-https software-properties-common ca-certificates \
    && mkdir /var/run/sshd \
    && mkdir /root/.ssh \
    && chmod 700 /root/.ssh \
    && ssh-keygen -A \
    && sed -i "s/^.*PasswordAuthentication.*$/PasswordAuthentication no/" /etc/ssh/sshd_config \
    && sed -i "s/^.*X11Forwarding.*$/X11Forwarding yes/" /etc/ssh/sshd_config \
    && sed -i "s/^.*X11UseLocalhost.*$/X11UseLocalhost no/" /etc/ssh/sshd_config \
    && grep "^X11UseLocalhost" /etc/ssh/sshd_config || echo "X11UseLocalhost no" >> /etc/ssh/sshd_config \
    && echo "export NO_AT_BRIDGE=1" >> ~/.bashrc
ENV DISPLAY :0

# install networking stuff
RUN apt-get update -y && apt-get install -y --fix-missing net-tools iputils-ping iproute2 openconnect && \
    apt-get install -y mosquitto mosquitto-clients && mkdir /var/run/mosquitto/ && chown mosquitto: /var/run/mosquitto/ 
COPY mosquitto.conf /etc/mosquitto/mosquitto.conf

# install parsing tools
RUN apt-get update -y && apt-get install -y jq && pip install yq

# cleanup
RUN apt-get clean && apt-get autoclean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && apt-get autoremove -y

WORKDIR /home/